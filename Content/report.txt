============================= test session starts ==============================
platform linux -- Python 3.11.8, pytest-8.0.0, pluggy-1.4.0
rootdir: /home/vanderlei/Documents/Repositorios/Disciplina-metodos-computacionais/Content
plugins: anyio-4.2.0
collected 40 items

test_template.py ......FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                [100%]

=================================== FAILURES ===================================
_________________________ test_dot_real_not_1D_arrays __________________________

    def test_dot_real_not_1D_arrays():
        'fail due to input that is not 1D array'
        vector_1 = np.ones((3,2))
        vector_2 = np.arange(4)
        with pytest.raises(AssertionError):
>           temp.dot_real(vector_1, vector_2)

test_template.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[1., 1.],
       [1., 1.],
       [1., 1.]]), y = array([0, 1, 2, 3])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
________________________ test_dot_real_different_sizes _________________________

    def test_dot_real_different_sizes():
        'fail due to inputs having different sizes'
        vector_1 = np.linspace(5,6,7)
        vector_2 = np.arange(4)
        with pytest.raises(AssertionError):
>           temp.dot_real(vector_1, vector_2)

test_template.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([5.        , 5.16666667, 5.33333333, 5.5       , 5.66666667,
       5.83333333, 6.        ])
y = array([0, 1, 2, 3]), check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
__________________________ test_dot_real_known_values __________________________

    def test_dot_real_known_values():
        'check output produced by specific input'
        vector_1 = 0.1*np.ones(10)
        vector_2 = np.linspace(23.1, 52, 10)
        reference_output = np.mean(vector_2)
>       computed_output = temp.dot_real(vector_1, vector_2)

test_template.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])
y = array([23.1       , 26.31111111, 29.52222222, 32.73333333, 35.94444444,
       39.15555556, 42.36666667, 45.57777778, 48.78888889, 52.        ])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
_______________________ test_dot_real_compare_numpy_dot ________________________

    def test_dot_real_compare_numpy_dot():
        'compare with numpy.dot'
        # set random generator
        rng = np.random.default_rng(12765)
        # use the random generator to create input parameters
        vector_1 = rng.random(13)
        vector_2 = rng.random(13)
        reference_output_numpy = np.dot(vector_1, vector_2)
>       computed_output = temp.dot_real(vector_1, vector_2)

test_template.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.53380613, 0.4261172 , 0.86014834, 0.26857677, 0.79546034,
       0.2607095 , 0.43045819, 0.34062779, 0.48860784, 0.1533095 ,
       0.80949828, 0.47898518, 0.48410294])
y = array([0.31890063, 0.34463052, 0.23862266, 0.72341614, 0.84673537,
       0.65621432, 0.53497568, 0.59453743, 0.71511912, 0.36090324,
       0.35291216, 0.54880321, 0.28734165])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
_________________________ test_dot_real_commutativity __________________________

    def test_dot_real_commutativity():
        'verify commutativity'
        # set random generator
        rng = np.random.default_rng(555543127)
        # use the random generator to create input parameters
        a = rng.random(15)
        b = rng.random(15)
        # a dot b = b dot a
>       output_ab = temp.dot_real(a, b)

test_template.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.36390545, 0.90446738, 0.22053808, 0.03898415, 0.64234151,
       0.25606818, 0.07466973, 0.99877067, 0.61808089, 0.72431187,
       0.34183856, 0.24347913, 0.05383888, 0.12392188, 0.81970032])
y = array([0.01515058, 0.19187464, 0.8219872 , 0.12511506, 0.66048462,
       0.50043604, 0.44197608, 0.59750766, 0.59149826, 0.67291307,
       0.04107598, 0.256861  , 0.60278052, 0.48813166, 0.13735731])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
_________________________ test_dot_real_distributivity _________________________

    def test_dot_real_distributivity():
        'verify distributivity over sum'
        # set random generator
        rng = np.random.default_rng(555543127)
        # use the random generator to create input parameters
        a = rng.random(15)
        b = rng.random(15)
        c = rng.random(15)
        # a dot (b + c) = (a dot b) + (a dot c)
>       output_a_bc = temp.dot_real(a, b + c)

test_template.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.36390545, 0.90446738, 0.22053808, 0.03898415, 0.64234151,
       0.25606818, 0.07466973, 0.99877067, 0.61808089, 0.72431187,
       0.34183856, 0.24347913, 0.05383888, 0.12392188, 0.81970032])
y = array([0.34860404, 0.7811653 , 1.40387868, 1.02844927, 1.05436764,
       0.99820554, 0.97569988, 1.49899181, 1.46219882, 0.74408933,
       0.15958698, 1.01437963, 0.66505794, 0.71116633, 0.62155188])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
_____________________ test_dot_real_scalar_multiplication ______________________

    def test_dot_real_scalar_multiplication():
        'verify scalar multiplication property'
        # set random generator
        rng = np.random.default_rng(333543127)
        # use the random generator to create input parameters
        a = rng.random(15)
        b = rng.random(15)
        c1 = 5.6
        c2 = 9.1
        # (c1 a) dot (c2 b) = c1c2 (a dot b)
>       output_c1a_c2b = temp.dot_real(c1*a, c2*b)

test_template.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([4.31244645, 2.64900058, 5.49869191, 1.44124981, 1.94266186,
       3.28221988, 1.50135223, 2.78144672, 1.33576324, 3.73064535,
       1.85089496, 1.90948176, 4.4939562 , 1.80518936, 0.69922168])
y = array([7.71470167, 9.01659301, 8.90055151, 2.48978231, 4.69750498,
       3.48912955, 4.43381464, 6.48668822, 8.47651663, 1.87536351,
       4.18451549, 3.4850106 , 1.54367655, 8.44159091, 2.49702783])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
_________________________ test_dot_real_ignore_complex _________________________

    def test_dot_real_ignore_complex():
        'complex part of input must be ignored'
        vector_1 = 0.1*np.ones(10)
        vector_2 = np.linspace(23.1, 52, 10) - 1j*np.ones(10)
        reference_output = np.mean(vector_2.real)
>       computed_output = temp.dot_real(vector_1, vector_2)

test_template.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])
y = array([23.1       -1.j, 26.31111111-1.j, 29.52222222-1.j, 32.73333333-1.j,
       35.94444444-1.j, 39.15555556-1.j, 42.36666667-1.j, 45.57777778-1.j,
       48.78888889-1.j, 52.        -1.j])
check_input = True

    def dot_real(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of R^N. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:102: NameError
______________________ test_dot_complex_compare_numpy_dot ______________________

    def test_dot_complex_compare_numpy_dot():
        'compare dot_complex, numpy and numba with numpy.dot'
        # set random generator
        rng = np.random.default_rng(1111763412)
        # use the random generator to create input parameters
        vector_1 = rng.random(13) + 1j*rng.random(13)
        vector_2 = rng.random(13) + 1j*rng.random(13)
>       output = temp.dot_complex(vector_1, vector_2)

test_template.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.10956469+0.04384968j, 0.75054913+0.87318208j,
       0.29888399+0.39768905j, 0.66514864+0.62972476j,
       0...747706j, 0.07121581+0.41603771j,
       0.69744596+0.87426306j, 0.67536391+0.55011723j,
       0.06747249+0.77897111j])
y = array([0.89720438+0.81260898j, 0.52335702+0.82658796j,
       0.9249803 +0.24110261j, 0.6146916 +0.36015859j,
       0...086885j, 0.01785795+0.30702861j,
       0.39451788+0.72438368j, 0.48181564+0.28200291j,
       0.4288797 +0.79537448j])
check_input = True

    def dot_complex(x, y, check_input=True):
        '''
        Compute the dot product of x and y, where
        x, y are elements of C^N.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with N elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : scalar
            Dot product of x and y.
        '''
    
>       return result
E       NameError: name 'result' is not defined

template.py:124: NameError
_____________________ test_hadamard_real_different_shapes ______________________

    def test_hadamard_real_different_shapes():
        'fail if input variables have different sizes'
        a = np.linspace(5,10,8)
        B = np.ones((4,4))
        with pytest.raises(AssertionError):
>           temp.hadamard_real(a, B)

test_template.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([ 5.        ,  5.71428571,  6.42857143,  7.14285714,  7.85714286,
        8.57142857,  9.28571429, 10.        ])
y = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
check_input = True

    def hadamard_real(x, y, check_input=True):
        '''
        Compute the Hadamard (or entrywise) product of x and y, where
        x and y may be real vectors or matrices having the same shape.
        The imaginary parts are ignored.
    
        The code uses a simple doubly nested loop to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays
            Real vectors or matrices having the same shape.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array
            Hadamard product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:152: NameError
_____________________ test_hadamard_real_compare_asterisk ______________________

    def test_hadamard_real_compare_asterisk():
        'compare hadamard_real function with * operator'
        # for vectors
        # set random generator
        rng = np.random.default_rng(11117665544444412)
        # use the random generator to create input parameters
        input1 = rng.random(18)
        input2 = rng.random(18)
>       output = temp.hadamard_real(input1, input2)

test_template.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.09669767, 0.54219083, 0.62861727, 0.27281377, 0.58774537,
       0.25552978, 0.75750249, 0.58499433, 0.519439...8457545,
       0.49520735, 0.24474026, 0.61856026, 0.99763245, 0.921434  ,
       0.02932686, 0.77851609, 0.16009932])
y = array([0.36576653, 0.88142187, 0.57937332, 0.49092766, 0.44415041,
       0.20538241, 0.88870919, 0.67117261, 0.540835...3796703,
       0.43596667, 0.4538835 , 0.11302799, 0.66726047, 0.08260965,
       0.7444628 , 0.69837893, 0.94352363])
check_input = True

    def hadamard_real(x, y, check_input=True):
        '''
        Compute the Hadamard (or entrywise) product of x and y, where
        x and y may be real vectors or matrices having the same shape.
        The imaginary parts are ignored.
    
        The code uses a simple doubly nested loop to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays
            Real vectors or matrices having the same shape.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array
            Hadamard product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:152: NameError
______________________ test_hadamard_real_ignore_complex _______________________

    def test_hadamard_real_ignore_complex():
        'complex part of input must be ignored'
        # for vectors
        # set random generator
        rng = np.random.default_rng(9999999917665544444412)
        # use the random generator to create input parameters
        input1 = rng.random(10)
        input2 = rng.random(10) + 1j*np.ones(10)
>       output = temp.hadamard_real(input1, input2)

test_template.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.83106739, 0.56708002, 0.7171877 , 0.22405636, 0.10089875,
       0.33339322, 0.94799306, 0.67555366, 0.41280192, 0.21096694])
y = array([0.49653376+1.j, 0.41490952+1.j, 0.457297  +1.j, 0.39674015+1.j,
       0.35146387+1.j, 0.50033987+1.j, 0.82477086+1.j, 0.73866301+1.j,
       0.08258763+1.j, 0.68996125+1.j])
check_input = True

    def hadamard_real(x, y, check_input=True):
        '''
        Compute the Hadamard (or entrywise) product of x and y, where
        x and y may be real vectors or matrices having the same shape.
        The imaginary parts are ignored.
    
        The code uses a simple doubly nested loop to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays
            Real vectors or matrices having the same shape.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array
            Hadamard product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:152: NameError
____________________ test_hadamard_complex_compare_asterisk ____________________

    def test_hadamard_complex_compare_asterisk():
        'compare hadamard_complex function with * operator'
        # for matrices
        # set random generator
        rng = np.random.default_rng(777799917665544444412)
        input1 = rng.random((4, 3))
        input2 = rng.random((4, 3))
>       output = temp.hadamard_complex(input1, input2)

test_template.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0.10634111, 0.16966469, 0.19237415],
       [0.81724621, 0.27564723, 0.18378935],
       [0.74732531, 0.84034065, 0.79622947],
       [0.5692068 , 0.37678503, 0.91830727]])
y = array([[0.15147626, 0.72598311, 0.64467522],
       [0.07554313, 0.56531374, 0.17095695],
       [0.58111954, 0.35740433, 0.76562156],
       [0.63867265, 0.35722061, 0.67528401]])
check_input = True

    def hadamard_complex(x, y, check_input=True):
        '''
        Compute the Hadamard (or entrywise) product of x and y, where
        x and y may be complex vectors or matrices having the same shape.
    
        Parameters
        ----------
        x, y : arrays
            Complex vectors or matrices having the same shape.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array
            Hadamard product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:175: NameError
_______________________ test_outer_real_input_not_vector _______________________

    def test_outer_real_input_not_vector():
        'fail with non-vector inputs'
        a = np.linspace(5,10,8)
        B = np.ones((4,4))
        with pytest.raises(AssertionError):
>           temp.outer_real_simple(a, B)

test_template.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([ 5.        ,  5.71428571,  6.42857143,  7.14285714,  7.85714286,
        8.57142857,  9.28571429, 10.        ])
y = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
check_input = True

    def outer_real_simple(x, y, check_input=True):
        '''
        Compute the outer product of x and y, where
        x in R^N and y in R^M. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with real elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array 2d
            Outer product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:202: NameError
_____________________ test_outer_real_compare_numpy_outer ______________________

    def test_outer_real_compare_numpy_outer():
        'compare with numpy.outer'
        # set random generator
        rng = np.random.default_rng(555799917665544441234)
        vector_1 = rng.random(13)
        vector_2 = rng.random(13)
        reference_output_numpy = np.outer(vector_1, vector_2)
>       computed_output_simple = temp.outer_real_simple(vector_1, vector_2)

test_template.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.25480496, 0.00824889, 0.61323868, 0.78714267, 0.64103014,
       0.93795636, 0.67525089, 0.91457769, 0.70650289, 0.29219769,
       0.54385432, 0.75751423, 0.06951281])
y = array([0.1616886 , 0.53779135, 0.4601044 , 0.672257  , 0.24543754,
       0.8305285 , 0.91029235, 0.18592297, 0.65767037, 0.02548562,
       0.90921407, 0.26906973, 0.5928933 ])
check_input = True

    def outer_real_simple(x, y, check_input=True):
        '''
        Compute the outer product of x and y, where
        x in R^N and y in R^M. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with real elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array 2d
            Outer product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:202: NameError
_________________________ test_outer_real_known_values _________________________

    def test_outer_real_known_values():
        'check output produced by specific input'
        vector_1 = np.ones(5)
        vector_2 = np.arange(1,11)
        reference_output = np.resize(vector_2, (vector_1.size, vector_2.size))
>       computed_output_simple = temp.outer_real_simple(vector_1, vector_2)

test_template.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([1., 1., 1., 1., 1.])
y = array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]), check_input = True

    def outer_real_simple(x, y, check_input=True):
        '''
        Compute the outer product of x and y, where
        x in R^N and y in R^M. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with real elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array 2d
            Outer product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:202: NameError
________________________ test_outer_real_transposition _________________________

    def test_outer_real_transposition():
        'verify the transposition property'
        # set random generator
        rng = np.random.default_rng(555799917665544441234)
        a = rng.random(8)
        b = rng.random(5)
>       a_outer_b_T_simple = temp.outer_real_simple(a, b).T

test_template.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.25480496, 0.00824889, 0.61323868, 0.78714267, 0.64103014,
       0.93795636, 0.67525089, 0.91457769])
y = array([0.70650289, 0.29219769, 0.54385432, 0.75751423, 0.06951281])
check_input = True

    def outer_real_simple(x, y, check_input=True):
        '''
        Compute the outer product of x and y, where
        x in R^N and y in R^M. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with real elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array 2d
            Outer product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:202: NameError
________________________ test_outer_real_distributivity ________________________

    def test_outer_real_distributivity():
        'verify the distributivity property'
        rng = np.random.default_rng(111555799917665544441)
        a = rng.random(5)
        b = rng.random(5)
        c = rng.random(4)
>       a_plus_b_outer_c_simple = temp.outer_real_simple(a+b, c)

test_template.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([0.61885631, 0.46991604, 0.95309093, 0.52466965, 0.6706294 ])
y = array([0.94452885, 0.77631326, 0.59485493, 0.63731795]), check_input = True

    def outer_real_simple(x, y, check_input=True):
        '''
        Compute the outer product of x and y, where
        x in R^N and y in R^M. The imaginary parts are ignored.
    
        The code uses a simple "for" to iterate on the arrays.
    
        Parameters
        ----------
        x, y : arrays 1D
            Vectors with real elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array 2d
            Outer product of x and y.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:202: NameError
____________________ test_outer_real_scalar_multiplication _____________________

    def test_outer_real_scalar_multiplication():
        'verify scalar multiplication property'
        rng = np.random.default_rng(231115557999176655444)
        a = rng.random(3)
        b = rng.random(6)
        c = 3.4
        ca_outer_b = []
        a_outer_cb = []
        outer_real = {
>           'simple' : outer_real_simple,
            'row' : outer_real_row,
            'column' : outer_real_column
        }
E       NameError: name 'outer_real_simple' is not defined

test_template.py:330: NameError
________________________ test_outer_real_ignore_complex ________________________

    def test_outer_real_ignore_complex():
        'complex part of input must be ignored'
        vector_1 = np.ones(5) - 0.4j*np.ones(5)
        vector_2 = np.arange(1,11)
        reference_output = np.resize(vector_2, (vector_1.size, vector_2.size))
        outer_real = {
>           'simple' : outer_real_simple,
            'row' : outer_real_row,
            'column' : outer_real_column
        }
E       NameError: name 'outer_real_simple' is not defined

test_template.py:348: NameError
____________________ test_outer_complex_compare_numpy_outer ____________________

    def test_outer_complex_compare_numpy_outer():
        'compare hadamard_complex function with * operator'
        # for matrices
        rng = np.random.default_rng(876231115557999176655)
        input1 = rng.random(7) + 1j*rng.random(7)
        input2 = rng.random(7) + 1j*rng.random(7)
        output_numpy_outer = np.outer(input1, input2)
        output = []
        for function in ['simple', 'row', 'column']:
>           output.append(temp.outer_complex(vector_1, vector_2, function))
E           NameError: name 'vector_1' is not defined

test_template.py:369: NameError
_____________________ test_outer_complex_invalid_function ______________________

    def test_outer_complex_invalid_function():
        'raise error for invalid function'
        for invalid_function in ['Simple', 'xxxxx', 'rows']:
            with pytest.raises(AssertionError):
>               temp.outer_complex(np.ones(3), np.ones(3), invalid_function)

test_template.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([1., 1., 1.]), y = array([1., 1., 1.]), check_input = 'Simple'
function = 'simple'

    def outer_complex(x, y, check_input=True, function='simple'):
        '''
        Compute the outer product of x and y, where x and y are complex vectors.
    
        Parameters
        ----------
        x, y : 1D arrays
            Complex vectors.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        function : string
            Defines the outer_real function to be used. The possible
            values are 'simple', 'row' and 'column'.
    
        Returns
        -------
        result : 2D array
            Outer product of x and y.
        '''
    
    
    
        outer_real = {
            'simple' : outer_real_simple,
            'row' : outer_real_row,
            'column' : outer_real_column
        }
    
    
        # use the syntax outer_real[function] to specify the
        # the outer_real_* function.
    
>       return result
E       NameError: name 'result' is not defined

template.py:293: NameError
_________________________ test_vec_norm_invalid_vector _________________________

    def test_vec_norm_invalid_vector():
        'fail with non-vector inputs'
        p = 1
        x1 = np.ones((4,4))
        x2 = 'not-a-vector'
        x3 = 3.7
        x4 = [3.7]
        x5 = (3.7)
        for x in [x1, x2, x3, x4, x5]:
            with pytest.raises(AssertionError):
>               temp.vec_norm(x, p)
E               AttributeError: module 'template' has no attribute 'vec_norm'

test_template.py:394: AttributeError
___________________________ test_vec_norm_invalid_p ____________________________

    def test_vec_norm_invalid_p():
        'fail with p different from 0, 1 or 2'
        x = np.ones(4)
        p1 = 10
        p2 = -1
        p3 = '3'
        p4 = (2)
        p5 = [1]
        for p in [p1, p2, p3, p4, p5]:
            with pytest.raises(AssertionError):
>               temp.vec_norm(x, p)
E               AttributeError: module 'template' has no attribute 'vec_norm'

test_template.py:407: AttributeError
_____________________ test_matvec_real_input_doesnt_match ______________________

    def test_matvec_real_input_doesnt_match():
        'fail when matrix columns doesnt match vector size'
        A = np.ones((5,4))
        x = np.ones(3)
        with pytest.raises(AssertionError):
>           temp.matvec_real_simple(A, x)

test_template.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

A = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
x = array([1., 1., 1.]), check_input = True

    def matvec_real_simple(A, x, check_input=True):
        '''
        Compute the matrix-vector product of A and x, where
        A in R^NxM and x in R^M. The imaginary parts are ignored.
    
        The code uses a simple doubly nested "for" to iterate on the arrays.
    
        Parameters
        ----------
        A : array 2D
            NxM matrix with real elements.
    
        x : array 1D
            Real vector witn M elements.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : array 1D
            Product of A and x.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:323: NameError
_________________ test_matvec_real_functions_compare_numpy_dot _________________

    def test_matvec_real_functions_compare_numpy_dot():
        'compare matvec_real_XXXX with numpy.dot'
        rng = np.random.default_rng(7777723111555799917665)
>       matrix = rng.random(3,4)

test_template.py:427: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   TypeError: Cannot interpret '4' as a data type

numpy/random/_generator.pyx:354: TypeError
__________________ test_matvec_real_functions_ignore_complex ___________________

    def test_matvec_real_functions_ignore_complex():
        'complex part of input must be ignored'
        rng = np.random.default_rng(9999977777231115557999)
>       matrix = rng.random(3,4) - 0.3j*np.ones((3,4))

test_template.py:441: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   TypeError: Cannot interpret '4' as a data type

numpy/random/_generator.pyx:354: TypeError
____________________ test_matvec_complex_compare_numpy_dot _____________________

    def test_matvec_complex_compare_numpy_dot():
        'compare matvec_complex with numpy.dot'
        rng = np.random.default_rng(9999977777231115557999)
>       matrix = rng.random(3,4) + 1j*np.random.rand(3,4)

test_template.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   TypeError: Cannot interpret '4' as a data type

numpy/random/_generator.pyx:354: TypeError
_____________________ test_matvec_complex_invalid_function _____________________

    def test_matvec_complex_invalid_function():
        'must raise error for invalid function'
        A = np.ones((5,4))
        x = np.ones(4)
        with pytest.raises(AssertionError):
>           temp.matvec_complex(A, x, check_input=True, function='invalid-function')

test_template.py:471: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

A = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
x = array([1., 1., 1., 1.]), check_input = True, function = 'invalid-function'

    def matvec_complex(A, x, check_input=True, function='dot'):
        '''
        Compute the matrix-vector product of an NxM matrix A and
        a Mx1 vector x.
    
        Parameters
        ----------
        A : array 2D
            NxM matrix.
    
        x : array 1D
            Mx1 vector.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        function : string
            Defines the matvec_real function to be used. The possible
            values are 'simple', 'dot' and 'columns'.
    
        Returns
        -------
        result : array 1D
            Product of A and x.
        '''
    
        matvec_real = {
            'simple' : matvec_real_simple,
            'dot' : matvec_real_dot,
            'columns' : matvec_real_columns
        }
    
    
        # use the syntax matvec_real[function] to specify the
        # the matvec_real_* function.
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:419: NameError
_____________________ test_matmat_real_input_doesnt_match ______________________

    def test_matmat_real_input_doesnt_match():
        'fail when matrices dont match to compute the product'
        A = np.ones((3,3))
        B = np.ones((4,5))
        with pytest.raises(AssertionError):
>           temp.matmat_real_simple(A, B, check_input=True)

test_template.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

A = array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
B = array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
check_input = True

    def matmat_real_simple(A, B, check_input=True):
        '''
        Compute the matrix-matrix product of A and B, where
        A in R^NxM and B in R^MxP. The imaginary parts are ignored.
    
        The code uses a simple triply nested "for" to iterate on the arrays.
    
        Parameters
        ----------
        A, B : 2D arrays
            Real matrices.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        Returns
        -------
        result : 2D array
            Product of A and B.
        '''
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:446: NameError
_________________ test_matmat_real_functions_compare_numpy_dot _________________

    def test_matmat_real_functions_compare_numpy_dot():
        'compare matmat_real_XXXX with numpy.dot'
        rng = np.random.default_rng(1234599999777772311155)
>       matrix_1 = rng.random(5,3)

test_template.py:499: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   TypeError: Cannot interpret '3' as a data type

numpy/random/_generator.pyx:354: TypeError
__________________ test_matmat_real_functions_ignore_complex ___________________

    def test_matmat_real_functions_ignore_complex():
        'complex part of input must be ignored'
        rng = np.random.default_rng(7623012345999997777723)
>       matrix_1 = rng.random(5,3)

test_template.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   TypeError: Cannot interpret '3' as a data type

numpy/random/_generator.pyx:354: TypeError
____________________ test_matmat_complex_compare_numpy_dot _____________________

    def test_matmat_complex_compare_numpy_dot():
        'compare matmat_complex with numpy.dot'
        rng = np.random.default_rng(87900054312345999997777723)
>       matrix_1 = rng.random(5,3) + 1j*np.random.rand(5,3)

test_template.py:535: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   TypeError: Cannot interpret '3' as a data type

numpy/random/_generator.pyx:354: TypeError
_____________________ test_matmat_complex_invalid_function _____________________

    def test_matmat_complex_invalid_function():
        'must raise error for invalid function'
        A = np.ones((5,4))
        B = np.ones((4,3))
        with pytest.raises(AssertionError):
>           temp.matmat_complex(A, B, check_input=True, function='invalid-function')

test_template.py:555: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

A = array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
B = array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
check_input = True, function = 'invalid-function'

    def matmat_complex(A, B, check_input=True, function='simple'):
        '''
        Compute the matrix-matrix product of A and B, where
        A in C^NxM and B in C^MxP.
    
        Parameters
        ----------
        A, B : 2D arrays
            Complex matrices.
    
        check_input : boolean
            If True, verify if the input is valid. Default is True.
    
        function : string
            Defines the matmat_real function to be used. The possible
            values are 'simple', 'dot', 'rows', 'columns' or 'outer'.
    
        Returns
        -------
        result : 2D array
            Product of A and B.
        '''
    
        matmat_real = {
            'simple' : matmat_real_simple,
            'dot' : matmat_real_dot,
            'rows' : matmat_real_rows,
            'columns' : matmat_real_columns,
            'outer' : matmat_real_outer
        }
    
    
        # use the syntax matmat_real[function] to specify the
        # the matmat_real_* function.
    
    
>       return result
E       NameError: name 'result' is not defined

template.py:587: NameError
=========================== short test summary info ============================
FAILED test_template.py::test_dot_real_not_1D_arrays - NameError: name 'resul...
FAILED test_template.py::test_dot_real_different_sizes - NameError: name 'res...
FAILED test_template.py::test_dot_real_known_values - NameError: name 'result...
FAILED test_template.py::test_dot_real_compare_numpy_dot - NameError: name 'r...
FAILED test_template.py::test_dot_real_commutativity - NameError: name 'resul...
FAILED test_template.py::test_dot_real_distributivity - NameError: name 'resu...
FAILED test_template.py::test_dot_real_scalar_multiplication - NameError: nam...
FAILED test_template.py::test_dot_real_ignore_complex - NameError: name 'resu...
FAILED test_template.py::test_dot_complex_compare_numpy_dot - NameError: name...
FAILED test_template.py::test_hadamard_real_different_shapes - NameError: nam...
FAILED test_template.py::test_hadamard_real_compare_asterisk - NameError: nam...
FAILED test_template.py::test_hadamard_real_ignore_complex - NameError: name ...
FAILED test_template.py::test_hadamard_complex_compare_asterisk - NameError: ...
FAILED test_template.py::test_outer_real_input_not_vector - NameError: name '...
FAILED test_template.py::test_outer_real_compare_numpy_outer - NameError: nam...
FAILED test_template.py::test_outer_real_known_values - NameError: name 'resu...
FAILED test_template.py::test_outer_real_transposition - NameError: name 'res...
FAILED test_template.py::test_outer_real_distributivity - NameError: name 're...
FAILED test_template.py::test_outer_real_scalar_multiplication - NameError: n...
FAILED test_template.py::test_outer_real_ignore_complex - NameError: name 'ou...
FAILED test_template.py::test_outer_complex_compare_numpy_outer - NameError: ...
FAILED test_template.py::test_outer_complex_invalid_function - NameError: nam...
FAILED test_template.py::test_vec_norm_invalid_vector - AttributeError: modul...
FAILED test_template.py::test_vec_norm_invalid_p - AttributeError: module 'te...
FAILED test_template.py::test_matvec_real_input_doesnt_match - NameError: nam...
FAILED test_template.py::test_matvec_real_functions_compare_numpy_dot - TypeE...
FAILED test_template.py::test_matvec_real_functions_ignore_complex - TypeErro...
FAILED test_template.py::test_matvec_complex_compare_numpy_dot - TypeError: C...
FAILED test_template.py::test_matvec_complex_invalid_function - NameError: na...
FAILED test_template.py::test_matmat_real_input_doesnt_match - NameError: nam...
FAILED test_template.py::test_matmat_real_functions_compare_numpy_dot - TypeE...
FAILED test_template.py::test_matmat_real_functions_ignore_complex - TypeErro...
FAILED test_template.py::test_matmat_complex_compare_numpy_dot - TypeError: C...
FAILED test_template.py::test_matmat_complex_invalid_function - NameError: na...
========================= 34 failed, 6 passed in 0.32s =========================
